DATA TYPES:
Java is considered a strongly typed language. To use a variable, the programmer must
declare the type of information that this variable can store. Java has eight data types that
are referred to as primitives (also known as elemental or simple types): byte,short,int,
long, float, double, char, and boolean. Java also has many predefined types that are
listed in the Java API, and the language allows the creation of user defined data types

Type Name Size Range:
boolean 8 bits true or false
byte 8 bits -128 to 127 (-27
 to 27
-1)
char 16 bits 0 to 65.535
short 16 bits -32,768 to 32,767 (-215 to 215-1)
int 32 bits -2,147,483,648 to 2,147,483,647(-231 to 231-1)
float 32 bits ~-3.4 x 1038 to ~3.4 x 1038
long 64 bits ~-9.2 x 1015 to ~9.2 x 1015(-263 to 263-1)
double 64 bits ~-1.8 x 10308 to ~1.8 x 10308
Example:
import java.util.Scanner;
public class Main
{
public static void main(String[] args) {
  Scanner scan = new Scanner(System.in);
  System.out.println("Enter your first name ");
        String name = scan.nextLine();
       
         Scanner scanner=new Scanner(System.in);
         System.out.println("Enter your last name ");
         char initial=scanner.nextLine().charAt(0);
         
       
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter your age");
        int age=sc.nextInt();
        System.out.println("Enter your height");
        double height=scan.nextDouble();
        Scanner se=new Scanner(System.in);
       System.out.println("Enter your weight");
       float weight=scan.nextFloat();
        Scanner ss=new Scanner(System.in);
        System.out.println("Enter your gender(true for female false for male)");
        boolean gender=scan.nextBoolean();
    if(gender){
            System.out.println("female");
        }
        else{
            System.out.println("male");
             System.out.println("Number of languages know");
             byte language=scan.nextByte();
           
           
            Scanner sss=new Scanner(System.in);
        System.out.println("Enter your spr no");
        short no=scan.nextShort();
         System.out.println("Enter your phone no");
         long phone=scan.nextLong();
       
        }
        }
}

VARIABLES:
Java supports three types of variables: local variables, instance variables, and class
variables. This section will discuss the placement and scope of variables within a Java
class.
syntax:
class MyClass
{
 // This is a comment
 double salary = 45678.00; // instance variable
 static int totalcount = 0; // class variable

 public static void main(String[] args)
 {
 char male = 'm'; // local variable
 }
}

OPERATORS:
Java supports the standard set of arithmetic, bitwise, relational, and logical operators that
will be covered throughout this book.

Arithmetic operators:
The modulus operator (%) can be used with for both integers and floating points.
Relational operators:
As in C and C++, comparison for equality is done with the double equal signs (==) as
opposed to a single equal sign (=). The single equal sign is used only for value assignment.
Logical operators:
Logical expressions are used in conditional statements such as if and while loops. These
expressions must evaluate to a boolean value. In other languages, numeric expressions can
be substituted and evaluated; Java does not allow this.
Java supports short-circuit logical operators for the AND (&&) and OR (||) operators.


CONDITIONAL STATEMENTS:
Conditional statements are used to ask questions. The two types of conditional
statements are if statements and switch/case statements

if statement:
The if statement is used to execute a code block conditionally. It surrounds a code
block, and that block will only be entered when the condition in the if statement
evaluates to true.
SYNTAX:
if (boolean_expression1)
{
 // One or more lines of code.
}
else if (boolean_expression2) // OPTIONAL
{
 // Still more lines of code.
}
else // OPTIONAL
{
 // Yet more lines of code.
}
EXAMPLE:
if ( grade >= 90 )
{
 System.out.println("You made an A!!!");
}
else if ( grade >= 80 )
{
 System.out.println("You made a B!");
}
else if ( grade >= 70 ) // more than one “else if” can be used
{
 System.out.println("You made a C.");
}
else
{
 System.out.println("You should probably study more next time.");
}


switch/case statement:
The switch statement allows a choice from a number of options. It will test a number of
cases against a variable of type char, byte, short, or int. 
SYNTAX:
switch (variable)
{
 case value0:
 // block to execute
 break;
 case value1:
 // block to execute
 break;
 default:
 // block to execute
}
EXAMPLE:
import java.util.Scanner;
public class Main
{
	public static void main(String[] args){
	    Scanner ss=new Scanner(System.in);
	    int day=ss.nextInt();
	    
	    switch (day){
	    case 0:
	    System.out.println("monday");
	    break;
	    case 1:
	    System.out.println("tuesday");
	    break;
	    case 2:
	    System.out.println("wednesday");
	    break;
	    case 3:
	    System.out.println("thursday");
	    break;
	    case 4:
	    System.out.println("friday");
	    break;
	    case 5:
	    System.out.println("saturday");
	    break;
	    case 6:
	    System.out.println("sunday");
	    break;
	    
	    
	}
	
	
	
		
	
	
	}
}


ITERATION (LOOP) STATEMENTS:
Iteration or loop statements are used to set up and handle processes that must be
repeated. The three types of loops are while, do while, and for.

while loop (entry condition loop):
The while loop checks a condition before entering the loop, then executes the loop block
if the condition is true. The condition must be a boolean expression contained in
parentheses like the if statement.
SYNTAX:
while (boolean_expression)
{
 // loop block
}
EXAMPLE:

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	    
	    Scanner ss = new Scanner(System.in);
	    System.out.println("Enter the number");
	    int number=ss.nextInt();
	    while(number>=0){
	        if(number%2==0){
	            System.out.println("even number");
	        }
	        else{
	            System.out.println("odd number");
	        }
	        number--;
	        }
	        }
	    }

do while loop (exit condition loop):
Because the condition is checked first in a while loop, it is possible that the loop may
never execute. This second iteration type ensures that the loop block executes at least
once by placing the condition at the end of the loop
SYNTAX:
do
{
 // loop block
} while (boolean_expression);
EXAMPLE:
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	    
	    Scanner ss = new Scanner(System.in);
	    System.out.println("Enter the number");
	    int number=ss.nextInt();
	    do{
	         if(number%2==0){
	            System.out.println("even number");
	        }
	        else{
	            System.out.println("odd number");
	        }
	        number--;
	    
	  }
	        while(number>=0);
	    }

for loop:
The while loop and do while loop are useful for many situations, but you must control
the boolean condition, ensuring that the variables change and eventually make the
condition false. If you know how many times you want to iterate, the for loop is
probably the best choice
SYNTAX:
for (initial_condition; boolean_expression; iteration)
{
 // loop block
}
EXAMPLE:
public class Main
{
	public static void main(String[] args) {
	    for (int count=1;count <=10; count++)
	    {
	        
	    	System.out.println(count);   
	    }
		
	}
}


Nested loops (break and continue):
The break statement was introduced with the switch statement in order to keep multiple
cases from executing. You can prematurely end other control blocks such as a loop by
executing a break statement. Because you do not want the loop to end each time, the
break statement is placed inside a conditional statement (if).
EXAMPLE:




	   






