
// OVERIDING 
class Vehicle {
    void drive() {
        System.out.println("drive");
    }
}

class Bike extends Vehicle {
    @Override
    void drive() {
        System.out.println("driving bike");
    }
}

class Car extends Vehicle {
    @Override
    void drive() {
        System.out.println("driving car");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle v = new Bike();
        v.drive();

        Vehicle a = new Car();
        a.drive();

        Vehicle b = new Vehicle();
        b.drive();
    }
}

//METHOD OVERLOADING
class Main {


    public static int add(int a, int b) {
        return a + b;
    }


    public static double add(double a, double b, double c) {
        return a + b + c;
    }

    public static void main(String[] args) {
        System.out.println(Main.add(4, 5));             
        System.out.println(Main.add(2.4, 3.14, 6.15));   
    }
}


class banking {
    void mode() {
        System.out.println("banking");
    }
}

class UPI extends banking {
    @Override
    void mode() {
        System.out.println("UPI");
    }
}

class credit extends banking {
    @Override
    void mode() {
        System.out.println("credit");
    }
}
class banktransfer extends banking {
    @Override
    void mode() {
        System.out.println("banktransfer");
    }
}

//BANKING

public class Main {
    public static void main(String[] args) {
banking v = new UPI();
        v.mode();

        banking a = new credit();
        a.mode();

        banking b = new banktransfer();
        b.mode();
    }
}

//SALARY DETAILS
class salary {
    void mode() {
        System.out.println("salary");
    }
}

class HR extends salary {
    @Override
    void mode() {
        System.out.println("50k");
    }
}

class Manager extends salary {
    @Override
    void mode() {
        System.out.println("30k");
    }
}
class employee extends salary {
    @Override
    void mode() {
        System.out.println("15k");
    }
}

public class Main {
    public static void main(String[] args) {
        salary h = new salary();
        h.mode();

salary v = new HR();
        v.mode();

        salary a = new Manager();
        a.mode();

        salary b = new employee();
        b.mode();
    }
}



